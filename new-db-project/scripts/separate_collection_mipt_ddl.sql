DROP TABLE IF EXISTS overflow_report;
DROP TABLE IF EXISTS taking_out_participant;
DROP TABLE IF EXISTS taking_out;
DROP TABLE IF EXISTS container;
DROP TABLE IF EXISTS activist;
DROP TABLE IF EXISTS type_of_waste;
DROP TABLE IF EXISTS map_location;

CREATE TABLE map_location (
    map_location_id INTEGER      PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    latitude        DECIMAL(8,6) NOT NULL,
    longitude       DECIMAL(9,6) NOT NULL,
    location_name   VARCHAR(200) NOT NULL UNIQUE,
    CONSTRAINT coords_must_be_unique UNIQUE (latitude, longitude)
);

CREATE TABLE type_of_waste (
    name             VARCHAR(200)  PRIMARY KEY,
    category         VARCHAR(200)  NOT NULL,
    description      VARCHAR(2000) NOT NULL,
    collection_rules VARCHAR(2000) NOT NULL
);

CREATE TABLE activist ( -- SCD type 2
    record_id     INTEGER      PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    activist_id   INTEGER      NOT NULL    GENERATED BY DEFAULT AS IDENTITY,
    first_name    VARCHAR(100) NOT NULL,
    surname       VARCHAR(100) NOT NULL,
    tg_username   VARCHAR(100) NOT NULL,
    valid_from_dt DATE         NOT NULL,
    valid_to_dt   DATE         NOT NULL DEFAULT '5999-01-01 00:00:00'
);

CREATE TABLE container (
    container_id    INTEGER        PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    map_location_id INTEGER        NOT NULL
        REFERENCES map_location (map_location_id) ON DELETE RESTRICT,
    place           VARCHAR(200)   NOT NULL,
    type_of_waste   VARCHAR(200)   NOT NULL
        REFERENCES type_of_waste (name) ON DELETE RESTRICT ON UPDATE CASCADE,
    responsible_activist_id INTEGER, -- REFERENCES activist (activist_id)
    description     VARCHAR(500)   NOT NULL,
    capacity_litres NUMERIC(12, 2) NOT NULL,
    is_maintained   BOOLEAN        NOT NULL DEFAULT TRUE,
    CONSTRAINT maintained_must_have_activist
        CHECK (responsible_activist_id IS NOT NULL OR NOT is_maintained)
);

CREATE TABLE taking_out (
    taking_out_id INTEGER        PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    datetime      TIMESTAMP      NOT NULL,
    container_id  INTEGER        NOT NULL
        REFERENCES container (container_id) ON DELETE RESTRICT,
    amount_litres NUMERIC(12, 2) NOT NULL
);

CREATE TABLE taking_out_participant (
    taking_out_id INTEGER NOT NULL
        REFERENCES taking_out (taking_out_id) ON DELETE CASCADE,
    activist_id   INTEGER NOT NULL -- REFERENCES activist (activist_id)
);

CREATE TABLE overflow_report (
    datetime     TIMESTAMP NOT NULL,
    container_id INTEGER   NOT NULL
        REFERENCES container (container_id) ON DELETE RESTRICT
);
